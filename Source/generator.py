import warnings
from typing import Any, Callable, Dict, Iterable, List, Optional, Tuple, Union

import time
import torch
import torch.distributed as dist
import torch.nn as nn
import torch.nn.functional as F
from transformers import T5ForConditionalGeneration
from transformers.generation_logits_process import LogitsProcessorList
from transformers.generation_stopping_criteria import (
    StoppingCriteriaList, validate_stopping_criteria)
from transformers.generation_utils import (GreedySearchDecoderOnlyOutput,
                                           GreedySearchEncoderDecoderOutput,
                                           GreedySearchOutput)


class Generator(T5ForConditionalGeneration):
    """ Generator """

    def __init__(self, vocab_size, embedding_dim, hidden_dim, use_cuda):
        super().__init__()
        self.tokenizer = None
        self.args = None

    @staticmethod
    def from_pretrained(path):
        model = T5ForConditionalGeneration.from_pretrained(path)
        model.__class__ = Generator
        model.log_softmax = nn.LogSoftmax(dim=1)
        return model

    def forward(
        self, *argv, **kwargs
    ):
        """
        Embeds input and applies LSTM on the input sequence.

        Inputs: x
            - x: (batch_size, seq_len), sequence of tokens generated by generator
        Outputs: out
            - out: (batch_size * seq_len, vocab_size), lstm output prediction
        """
        if "output_scores" in kwargs and kwargs["output_scores"] is True:
            if "do_sample" in kwargs and kwargs["do_sample"] is True:
                inputs = kwargs.pop("doc_ids")
                decoder_input_ids = kwargs.pop("code_ids")
                min_length = kwargs["min_length"] if "min_length" in kwargs else None
                return self.generate_forward(
                    inputs=inputs,
                    decoder_input_ids=decoder_input_ids,
                    num_beams=1,
                    num_beam_groups=1,
                    num_return_sequences=1,
                    max_length=self.args.max_target_length + 1,  # <bos> take up one position
                    do_sample=True,
                    min_length=min_length,
                )
            elif "do_greedy" in kwargs and kwargs["do_greedy"] is True:
                inputs = kwargs.pop("doc_ids")
                decoder_input_ids = kwargs.pop("code_ids")
                min_length = kwargs["min_length"] if "min_length" in kwargs else None
                return self.generate_forward(
                    inputs=inputs,
                    decoder_input_ids=decoder_input_ids,
                    num_beams=1,
                    num_beam_groups=1,
                    num_return_sequences=1,
                    max_length=self.args.max_target_length + 1,
                    do_sample=False,
                    min_length=min_length,
                )
            else:
                doc_ids = kwargs["doc_ids"]
                code_ids = kwargs["code_ids"]
                if "attention_mask" in kwargs and kwargs["attention_mask"] is not None:
                    attention_mask = kwargs["attention_mask"]
                else:
                    attention_mask = doc_ids.ne(self.tokenizer.pad_token_id)
                if "decoder_attention_mask" in kwargs and kwargs["decoder_attention_mask"] is not None:
                    decoder_attention_mask = kwargs["decoder_attention_mask"]
                else:
                    decoder_attention_mask = code_ids.ne(
                        self.tokenizer.pad_token_id)
                encoder_outputs = self.encoder(
                    input_ids=doc_ids,
                    attention_mask=attention_mask,
                    output_attentions=False,
                    return_dict=False
                )
                hidden_states = encoder_outputs[0]
                decoder_inputs = self._shift_right(code_ids)
                decoder_outputs = self.decoder(
                    input_ids=decoder_inputs,
                    attention_mask=decoder_attention_mask,
                    encoder_hidden_states=hidden_states,
                    encoder_attention_mask=attention_mask,
                    output_attentions=False,
                    return_dict=False
                )
                sequence_output = decoder_outputs[0]
                if self.config.tie_word_embeddings:  # this is True default
                    sequence_output = sequence_output * \
                        (self.model_dim ** -0.5)
                lm_logits = self.lm_head(sequence_output)
                lm_logits = lm_logits.view(-1, lm_logits.size(-1))
                out = self.log_softmax(lm_logits)
                return out  # (batch_size*seq_len, vocab_size)

        return super().forward(*argv, **kwargs)

    def generate_forward(
            self, inputs, decoder_input_ids,
            num_beams: Optional[int] = None,
            num_beam_groups: Optional[int] = None,
            num_return_sequences: Optional[int] = None,
            min_length: Optional[int] = None,
            max_length: Optional[int] = None,
            do_sample: Optional[bool] = None,
            synced_gpus: Optional[bool] = None,
            max_time: Optional[float] = None,
            decoder_start_token_id: Optional[int] = None,
            logits_processor: Optional[LogitsProcessorList] = LogitsProcessorList(),
            stopping_criteria: Optional[StoppingCriteriaList] = StoppingCriteriaList(),
            **model_kwargs,):
        # 1. Set generation parameters if not already defined
        bos_token_id = self.tokenizer.bos_token_id
        pad_token_id = self.tokenizer.pad_token_id
        eos_token_id = self.tokenizer.eos_token_id

        is_greedy_gen_mode = (num_beams == 1) and (
            num_beam_groups == 1) and do_sample is False
        is_sample_gen_mode = (num_beams == 1) and (
            num_beam_groups == 1) and do_sample is True

        # 2. Define model inputs
        # inputs_tensor has to be defined
        # model_input_name is defined if model-specific keyword input is passed
        # otherwise model_input_name is None
        # all model-specific keyword inputs are removed from `model_kwargs`
        inputs_tensor, model_input_name, model_kwargs = self._prepare_model_inputs(
            inputs, bos_token_id, model_kwargs)
        batch_size = inputs_tensor.shape[0]
        if self.config.is_encoder_decoder and "encoder_outputs" not in model_kwargs:
            # if model is encoder decoder encoder_outputs are created
            # **and added to `model_kwargs`**
            model_kwargs = self._prepare_encoder_decoder_kwargs_for_generation(
                inputs_tensor, model_kwargs, model_input_name
            )

        # 4. Prepare `input_ids` which will be used for auto-regressive generation
        if self.config.is_encoder_decoder:
            if decoder_input_ids is None:
                decoder_start_token_id = self._get_decoder_start_token_id(
                    decoder_start_token_id, bos_token_id)
                input_ids = torch.ones(
                    (batch_size, 1), dtype=torch.long, device=self.device) * decoder_start_token_id
            else:
                input_ids = decoder_input_ids
        else:
            # if decoder-only then inputs_tensor has to be `input_ids`
            input_ids = inputs_tensor

        # 7. prepare distribution pre_processing samplers
        logits_processor = self._get_logits_processor(
            repetition_penalty=None,
            no_repeat_ngram_size=None,
            encoder_no_repeat_ngram_size=None,
            encoder_input_ids=inputs_tensor,
            bad_words_ids=None,
            min_length=min_length,
            max_length=max_length,
            eos_token_id=self.tokenizer.eos_token_id,
            forced_bos_token_id=None,
            forced_eos_token_id=None,
            prefix_allowed_tokens_fn=None,
            num_beams=num_beams,  # The number of beam of greedy search is 1.
            # The beam group of greedy search is 1.
            num_beam_groups=num_beam_groups,
            diversity_penalty=None,
            remove_invalid_values=None,
            logits_processor=logits_processor,
        )

        # 8. prepare stopping criteria
        stopping_criteria = self._get_stopping_criteria(
            max_length=max_length, max_time=max_time, stopping_criteria=stopping_criteria
        )
        if is_greedy_gen_mode:
            # return self.unstop_greedy_search(
            return self.greedy_search(
                input_ids=input_ids,
                logits_processor=logits_processor,
                stopping_criteria=stopping_criteria,
                pad_token_id=pad_token_id,
                eos_token_id=eos_token_id,
                output_scores=True,
                return_dict_in_generate=True,
                synced_gpus=synced_gpus,
                **model_kwargs,
            )

        elif is_sample_gen_mode:
            # 10. prepare logits warper
            logits_warper = self._get_logits_warper(
                top_k=None, top_p=None, temperature=None, num_beams=num_beams
            )

            # 12. run sample
            return self.sample(
                input_ids=input_ids,
                logits_processor=logits_processor,
                logits_warper=logits_warper,
                stopping_criteria=stopping_criteria,
                pad_token_id=pad_token_id,
                eos_token_id=eos_token_id,
                output_scores=True,
                return_dict_in_generate=True,
                synced_gpus=synced_gpus,
                **model_kwargs,
            )

    @staticmethod
    def padding(inputs, max_length, padding_id=0):
        assert inputs.size().__len__() == 2, "Error dimension in inputs"
        padding_length = max_length-inputs.size(1)
        if padding_length == 0:
            return inputs
        else:
            out = F.pad(inputs, (0, padding_length), "constant", padding_id)
            return out

    def my_sample(self, batch_size, seq_len, given_len=None, x=None, x_mask=None, y=None, y_mask=None):
        """
        Samples the network and returns a batch of samples of length seq_len.

        Outputs: out
            - out: (batch_size * seq_len)
        """
        if x is None:
            x = torch.zeros(batch_size, 1, dtype=torch.int64)
            if self.args.no_cuda is False:
                x = x.to(self.args.device)
            out = self.generate(x, num_beams=1, do_sample=True,
                                early_stopping=False, max_length=seq_len)
        else:
            # version 1
            # t1 = time.time()
            out = self.generate(x, num_beams=1, do_sample=True, early_stopping=False, max_length=seq_len)
            # t2 = time.time()
            # print(t2 -t1)
            # version 2 TODO: to be confirmed
            # given_len = x.size(1)
            # out = self.generate(x, num_beams=1, do_sample=True, early_stopping=False, max_length=seq_len)
            # out[:,:given_len] = x

            # version 3
            # TODO: 这里考虑下用model.eval还是?主要问题在于是否启用dropout层.
            # with torch.no_grad():
            #     samples = []
            #     out = self(doc_ids=x, attention_mask=x_mask, code_ids=y, decoder_attention_mask=y_mask, output_scores=True)
            #     prob = torch.exp(out)
            #     samples = torch.multinomial(prob, 1).view((batch_size, seq_len))

            # version 4
            # with torch.no_grad():
            #     out = self(doc_ids=x, attention_mask=x_mask, code_ids=y,
            #                do_sample=True,
            #                output_scores=True,
            #                ).sequences  # 输出比输入多了一维, 应该是已知的直接给到了20维，导致多输出了一维。

        # out = torch.cat((y[:, :given_len], samples[:, given_len:]), dim=1)
        # out = torch.cat(samples, dim=1) # along the batch_size dimension
        return out  # grad_fn is None and out is token ids rather than the probability of tokens

    def unstop_greedy_search(
        self,
        input_ids: torch.LongTensor,
        logits_processor: Optional[LogitsProcessorList] = None,
        stopping_criteria: Optional[StoppingCriteriaList] = None,
        max_length: Optional[int] = None,
        pad_token_id: Optional[int] = None,
        eos_token_id: Optional[int] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        output_scores: Optional[bool] = None,
        return_dict_in_generate: Optional[bool] = None,
        synced_gpus: Optional[bool] = None,
        **model_kwargs,
    ) -> Union[GreedySearchOutput, torch.LongTensor]:
        r"""
        Generates sequences for models with a language modeling head using greedy decoding.

        Parameters:

            input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):
                The sequence used as a prompt for the generation.
            logits_processor (`LogitsProcessorList`, *optional*):
                An instance of [`LogitsProcessorList`]. List of instances of class derived from [`LogitsProcessor`]
                used to modify the prediction scores of the language modeling head applied at each generation step.
            stopping_criteria (`StoppingCriteriaList`, *optional*):
                An instance of [`StoppingCriteriaList`]. List of instances of class derived from [`StoppingCriteria`]
                used to tell if the generation loop should stop.

            max_length (`int`, *optional*, defaults to 20):
                **DEPRECATED**. Use `logits_processor` or `stopping_criteria` directly to cap the number of generated
                tokens. The maximum length of the sequence to be generated.
            pad_token_id (`int`, *optional*):
                The id of the *padding* token.
            eos_token_id (`int`, *optional*):
                The id of the *end-of-sequence* token.
            output_attentions (`bool`, *optional*, defaults to `False`):
                Whether or not to return the attentions tensors of all attention layers. See `attentions` under
                returned tensors for more details.
            output_hidden_states (`bool`, *optional*, defaults to `False`):
                Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors
                for more details.
            output_scores (`bool`, *optional*, defaults to `False`):
                Whether or not to return the prediction scores. See `scores` under returned tensors for more details.
            return_dict_in_generate (`bool`, *optional*, defaults to `False`):
                Whether or not to return a [`~file_utils.ModelOutput`] instead of a plain tuple.
            synced_gpus (`bool`, *optional*, defaults to `False`):
                Whether to continue running the while loop until max_length (needed for ZeRO stage 3)
            model_kwargs:
                Additional model specific keyword arguments will be forwarded to the `forward` function of the model.
                If model is an encoder-decoder model the kwargs should include `encoder_outputs`.

        Return:
            [`~generation_utils.GreedySearchDecoderOnlyOutput`], [`~generation_utils.GreedySearchEncoderDecoderOutput`]
            or `torch.LongTensor`: A `torch.LongTensor` containing the generated tokens (default behaviour) or a
            [`~generation_utils.GreedySearchDecoderOnlyOutput`] if `model.config.is_encoder_decoder=False` and
            `return_dict_in_generate=True` or a [`~generation_utils.GreedySearchEncoderDecoderOutput`] if
            `model.config.is_encoder_decoder=True`.

        Examples:

        ```python
        >>> from transformers import (
        ...     AutoTokenizer,
        ...     AutoModelForCausalLM,
        ...     LogitsProcessorList,
        ...     MinLengthLogitsProcessor,
        ... )

        >>> tokenizer = AutoTokenizer.from_pretrained("gpt2")
        >>> model = AutoModelForCausalLM.from_pretrained("gpt2")

        >>> # set pad_token_id to eos_token_id because GPT2 does not have a EOS token
        >>> model.config.pad_token_id = model.config.eos_token_id

        >>> input_prompt = "Today is a beautiful day, and"
        >>> input_ids = tokenizer(input_prompt, return_tensors="pt").input_ids

        >>> # instantiate logits processors
        >>> logits_processor = LogitsProcessorList(
        ...     [
        ...         MinLengthLogitsProcessor(15, eos_token_id=model.config.eos_token_id),
        ...     ]
        ... )

        >>> outputs = model.greedy_search(input_ids, logits_processor=logits_processor)

        >>> print("Generated:", tokenizer.batch_decode(outputs, skip_special_tokens=True))
        ```"""
        # init values
        logits_processor = logits_processor if logits_processor is not None else LogitsProcessorList()
        stopping_criteria = stopping_criteria if stopping_criteria is not None else StoppingCriteriaList()
        if max_length is not None:
            warnings.warn(
                "`max_length` is deprecated in this function, use `stopping_criteria=StoppingCriteriaList(MaxLengthCriteria(max_length=max_length))` instead.",
                UserWarning,
            )
            stopping_criteria = validate_stopping_criteria(
                stopping_criteria, max_length)
        pad_token_id = pad_token_id if pad_token_id is not None else self.config.pad_token_id
        eos_token_id = eos_token_id if eos_token_id is not None else self.config.eos_token_id
        output_scores = output_scores if output_scores is not None else self.config.output_scores
        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
        output_hidden_states = (
            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
        )
        return_dict_in_generate = (
            return_dict_in_generate if return_dict_in_generate is not None else self.config.return_dict_in_generate
        )

        # init attention / hidden states / scores tuples
        scores = () if (return_dict_in_generate and output_scores) else None
        decoder_attentions = () if (return_dict_in_generate and output_attentions) else None
        cross_attentions = () if (return_dict_in_generate and output_attentions) else None
        decoder_hidden_states = () if (
            return_dict_in_generate and output_hidden_states) else None

        # if model is an encoder-decoder, retrieve encoder attention weights and hidden states
        if return_dict_in_generate and self.config.is_encoder_decoder:
            encoder_attentions = model_kwargs["encoder_outputs"].get(
                "attentions") if output_attentions else None
            encoder_hidden_states = (
                model_kwargs["encoder_outputs"].get(
                    "hidden_states") if output_hidden_states else None
            )

        # keep track of which sequences are already finished
        unfinished_sequences = input_ids.new(input_ids.shape[0]).fill_(1)
        cur_len = input_ids.shape[-1]

        this_peer_finished = False  # used by synced_gpus only
        while True:

            if synced_gpus:
                # Under synced_gpus the `forward` call must continue until all gpus complete their sequence.
                # The following logic allows an early break if all peers finished generating their sequence
                this_peer_finished_flag = torch.tensor(
                    0.0 if this_peer_finished else 1.0).to(input_ids.device)
                # send 0.0 if we finished, 1.0 otherwise
                dist.all_reduce(this_peer_finished_flag, op=dist.ReduceOp.SUM)
                # did all peers finish? the reduced sum will be 0.0 then
                if this_peer_finished_flag.item() == 0.0:
                    break

            # prepare model inputs
            model_inputs = self.prepare_inputs_for_generation(
                input_ids, **model_kwargs)

            # forward pass to get next token
            outputs = self(
                **model_inputs,
                return_dict=True,
                output_attentions=output_attentions,
                output_hidden_states=output_hidden_states,
            )

            if synced_gpus and this_peer_finished:
                cur_len = cur_len + 1
                continue  # don't waste resources running the code we don't need

            next_token_logits = outputs.logits[:, -1, :]

            # Store scores, attentions and hidden_states when required
            if return_dict_in_generate:
                if output_scores:
                    scores += (next_token_logits,)
                if output_attentions:
                    decoder_attentions += (
                        (outputs.decoder_attentions,) if self.config.is_encoder_decoder else (
                            outputs.attentions,)
                    )
                    if self.config.is_encoder_decoder:
                        cross_attentions += (outputs.cross_attentions,)

                if output_hidden_states:
                    decoder_hidden_states += (
                        (outputs.decoder_hidden_states,)
                        if self.config.is_encoder_decoder
                        else (outputs.hidden_states,)
                    )

            # pre-process distribution
            next_tokens_scores = logits_processor(input_ids, next_token_logits)

            # argmax
            next_tokens = torch.argmax(next_tokens_scores, dim=-1)

            # finished sentences should have their next token be a padding token
            if eos_token_id is not None:
                if pad_token_id is None:
                    raise ValueError(
                        "If `eos_token_id` is defined, make sure that `pad_token_id` is defined.")
                next_tokens = next_tokens * unfinished_sequences + \
                    pad_token_id * (1 - unfinished_sequences)

            # update generated ids, model inputs, and length for next step
            input_ids = torch.cat([input_ids, next_tokens[:, None]], dim=-1)
            model_kwargs = self._update_model_kwargs_for_generation(
                outputs, model_kwargs, is_encoder_decoder=self.config.is_encoder_decoder
            )
            cur_len = cur_len + 1

            # if eos_token was found in one sentence, set sentence to finished
            if eos_token_id is not None:
                unfinished_sequences = unfinished_sequences.mul(
                    (next_tokens != eos_token_id).long())

            # stop only when we exceed the maximum length
            if stopping_criteria(input_ids, scores):
                if not synced_gpus:
                    break
                else:
                    this_peer_finished = True

        if return_dict_in_generate:
            if self.config.is_encoder_decoder:
                return GreedySearchEncoderDecoderOutput(
                    sequences=input_ids,
                    scores=scores,
                    encoder_attentions=encoder_attentions,
                    encoder_hidden_states=encoder_hidden_states,
                    decoder_attentions=decoder_attentions,
                    cross_attentions=cross_attentions,
                    decoder_hidden_states=decoder_hidden_states,
                )
            else:
                return GreedySearchDecoderOnlyOutput(
                    sequences=input_ids,
                    scores=scores,
                    attentions=decoder_attentions,
                    hidden_states=decoder_hidden_states,
                )
        else:
            return input_ids
